asyncapi: 2.2.0
info:
  title: Infrastructure AsyncAPI sample definitions
  version: 0.1.0
  description: This sample data below shows the Infrastructure DMS definitions
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  development:
    url: rabbitmq
    description: Development server
    protocol: amqp
    protocolVersion: 0.9.1
    security:
      - user_pass: [ ]
defaultContentType: application/json
channels:
  amqp/default:
    bindings:
      amqp:
        is: routingKey
        exchange:
          name: ''
          type: direct
          durable: true
          autoDelete: false
          vhost: /
    publish:
      bindings:
        amqp:
          deliveryMode: 2
          mandatory: false
      message:
        bindings:
          amqp:
            contentEncoding: UTF-8
            messageType: '#any'
  dead/letter/default:
    bindings:
      amqp:
        is: queue
        queue:
          name: DeadLetter.Q.Jobs
          durable: true
          exclusive: false
          autoDelete: false
          vhost: /
    subscribe:
      bindings:
        amqp:
          ack: true
      message:
        bindings:
          amqp:
            contentEncoding: UTF-8
            messageType: '#any'
  rpc/outbound/commands:
    bindings:
      amqp:
        is: routingKey
        exchange:
          name: Infrastructure.DX.RpcCommands
          type: direct
          durable: true
          autoDelete: false
          vhost: /
    publish:
      bindings:
        amqp:
          deliveryMode: 2
          mandatory: false
      message:
        bindings:
          amqp:
            contentEncoding: UTF-8
            messageType: '#any'
  outbound/commands:
    bindings:
      amqp:
        is: routingKey
        exchange:
          name: Infrastructure.DX.Commands
          type: direct
          durable: true
          autoDelete: false
          vhost: /
    publish:
      bindings:
        amqp:
          deliveryMode: 2
          mandatory: false
      message:
        bindings:
          amqp:
            contentEncoding: UTF-8
            messageType: '#any'
  inbound/commands:
    bindings:
      amqp:
        is: queue
        queue:
          name: Infrastructure.Q.Commands
          durable: true
          exclusive: false
          autoDelete: false
          vhost: /
    subscribe:
      bindings:
        amqp:
          cc: [
              'Infrastructure.DX.RpcCommands|Infrastructure.RK.CommandLoopback',
              'Infrastructure.DX.Commands|Infrastructure.RK.CommandFireAndForget'
          ]
          ack: true
      message:
        bindings:
          amqp:
            contentEncoding: UTF-8
            messageType: '#any'
  outbound/responses:
    bindings:
      amqp:
        is: routingKey
        exchange:
          name: Infrastructure.DX.Responses
          type: direct
          durable: true
          autoDelete: false
          vhost: /
    publish:
      bindings:
        amqp:
          deliveryMode: 2
          mandatory: false
      message:
        bindings:
          amqp:
            contentEncoding: UTF-8
            messageType: '#any'
  inbound/responses:
    bindings:
      amqp:
        is: queue
        queue:
          name: Infrastructure.Q.Responses
          durable: true
          exclusive: false
          autoDelete: false
          vhost: /
    subscribe:
      bindings:
        amqp:
          cc: [ 'Infrastructure.DX.Responses|Infrastructure.RK.ResponseLoopback' ]
          ack: true
      message:
        bindings:
          amqp:
            contentEncoding: UTF-8
            messageType: '#any'
  outbound/events:
    bindings:
      amqp:
        is: routingKey
        exchange:
          name: Infrastructure.FX.Events
          type: fanout
          durable: true
          autoDelete: false
          vhost: /
    publish:
      bindings:
        amqp:
          deliveryMode: 2
          mandatory: false
      message:
        bindings:
          amqp:
            contentEncoding: UTF-8
            messageType: '#any'
  inbound/events:
    bindings:
      amqp:
        is: queue
        queue:
          name: Infrastructure.Q.Events
          durable: true
          exclusive: false
          autoDelete: false
          vhost: /
    subscribe:
      bindings:
        amqp:
          cc: [ 'Infrastructure.FX.Events|Infrastructure.RK.EventLoopback' ]
          ack: true
      message:
        bindings:
          amqp:
            contentEncoding: UTF-8
            messageType: '#any'
components:
  securitySchemes:
    user_pass:
      type: userPassword
